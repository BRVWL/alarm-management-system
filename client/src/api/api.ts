/* tslint:disable */
/* eslint-disable */
/**
 * Cogvis Assignment
 * API for the Cogvis Assignment
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AlarmResponseDto
 */
export interface AlarmResponseDto {
    /**
     * The unique identifier for the alarm
     * @type {string}
     * @memberof AlarmResponseDto
     */
    'id': string;
    /**
     * The timestamp of the alarm
     * @type {string}
     * @memberof AlarmResponseDto
     */
    'timestamp': string;
    /**
     * The type of alarm
     * @type {string}
     * @memberof AlarmResponseDto
     */
    'type': AlarmResponseDtoTypeEnum;
    /**
     * The ID of the sensor that triggered this alarm
     * @type {SensorResponseDto}
     * @memberof AlarmResponseDto
     */
    'sensor': SensorResponseDto;
    /**
     * The visualizations associated with this alarm
     * @type {Array<VisualizationResponseDto>}
     * @memberof AlarmResponseDto
     */
    'visualizations'?: Array<VisualizationResponseDto>;
}

export const AlarmResponseDtoTypeEnum = {
    Motion: 'motion',
    Smoke: 'smoke',
    Temperature: 'temperature',
    Sound: 'sound',
    Intrusion: 'intrusion'
} as const;

export type AlarmResponseDtoTypeEnum = typeof AlarmResponseDtoTypeEnum[keyof typeof AlarmResponseDtoTypeEnum];

/**
 * 
 * @export
 * @interface AlarmsControllerGetAlarms200Response
 */
export interface AlarmsControllerGetAlarms200Response {
    /**
     * 
     * @type {Array<AlarmResponseDto>}
     * @memberof AlarmsControllerGetAlarms200Response
     */
    'data'?: Array<AlarmResponseDto>;
    /**
     * Total number of alarms matching the filter
     * @type {number}
     * @memberof AlarmsControllerGetAlarms200Response
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface CreateAlarmDto
 */
export interface CreateAlarmDto {
    /**
     * The type of alarm
     * @type {string}
     * @memberof CreateAlarmDto
     */
    'type': CreateAlarmDtoTypeEnum;
    /**
     * The ID of the sensor that triggered this alarm
     * @type {string}
     * @memberof CreateAlarmDto
     */
    'sensorId': string;
}

export const CreateAlarmDtoTypeEnum = {
    Motion: 'motion',
    Smoke: 'smoke',
    Temperature: 'temperature',
    Sound: 'sound',
    Intrusion: 'intrusion'
} as const;

export type CreateAlarmDtoTypeEnum = typeof CreateAlarmDtoTypeEnum[keyof typeof CreateAlarmDtoTypeEnum];

/**
 * 
 * @export
 * @interface CreateSensorDto
 */
export interface CreateSensorDto {
    /**
     * The name of the sensor
     * @type {string}
     * @memberof CreateSensorDto
     */
    'name': string;
    /**
     * The location of the sensor
     * @type {string}
     * @memberof CreateSensorDto
     */
    'location': string;
}
/**
 * 
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * Username for authentication
     * @type {string}
     * @memberof LoginDto
     */
    'username': string;
    /**
     * Password for authentication
     * @type {string}
     * @memberof LoginDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface RegisterDto
 */
export interface RegisterDto {
    /**
     * Username for registration
     * @type {string}
     * @memberof RegisterDto
     */
    'username': string;
    /**
     * Password for registration
     * @type {string}
     * @memberof RegisterDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface SensorResponseDto
 */
export interface SensorResponseDto {
    /**
     * The unique identifier for the sensor
     * @type {string}
     * @memberof SensorResponseDto
     */
    'id': string;
    /**
     * The name of the sensor
     * @type {string}
     * @memberof SensorResponseDto
     */
    'name': string;
    /**
     * The location of the sensor
     * @type {string}
     * @memberof SensorResponseDto
     */
    'location': string;
    /**
     * The alarms associated with this sensor
     * @type {Array<AlarmResponseDto>}
     * @memberof SensorResponseDto
     */
    'alarms'?: Array<AlarmResponseDto>;
}
/**
 * 
 * @export
 * @interface TokenResponseDto
 */
export interface TokenResponseDto {
    /**
     * JWT access token
     * @type {string}
     * @memberof TokenResponseDto
     */
    'accessToken': string;
    /**
     * User information
     * @type {object}
     * @memberof TokenResponseDto
     */
    'user': object;
}
/**
 * 
 * @export
 * @interface UpdateSensorDto
 */
export interface UpdateSensorDto {
    /**
     * The name of the sensor
     * @type {string}
     * @memberof UpdateSensorDto
     */
    'name'?: string;
    /**
     * The location of the sensor
     * @type {string}
     * @memberof UpdateSensorDto
     */
    'location'?: string;
}
/**
 * 
 * @export
 * @interface UserResponseDto
 */
export interface UserResponseDto {
    /**
     * User ID
     * @type {string}
     * @memberof UserResponseDto
     */
    'id': string;
    /**
     * Username
     * @type {string}
     * @memberof UserResponseDto
     */
    'username': string;
    /**
     * Whether the user is active
     * @type {boolean}
     * @memberof UserResponseDto
     */
    'isActive': boolean;
    /**
     * User creation timestamp
     * @type {string}
     * @memberof UserResponseDto
     */
    'createdAt': string;
    /**
     * User last update timestamp
     * @type {string}
     * @memberof UserResponseDto
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface VisualizationResponseDto
 */
export interface VisualizationResponseDto {
    /**
     * The unique identifier for the visualization
     * @type {string}
     * @memberof VisualizationResponseDto
     */
    'id': string;
    /**
     * The filename of the uploaded visualization
     * @type {string}
     * @memberof VisualizationResponseDto
     */
    'filename': string;
    /**
     * The path where the visualization can be accessed
     * @type {string}
     * @memberof VisualizationResponseDto
     */
    'path': string;
    /**
     * The timestamp when the visualization was uploaded
     * @type {string}
     * @memberof VisualizationResponseDto
     */
    'uploadedAt': string;
    /**
     * The ID of the alarm associated with this visualization
     * @type {AlarmResponseDto}
     * @memberof VisualizationResponseDto
     */
    'alarm': AlarmResponseDto;
}

/**
 * AlarmsApi - axios parameter creator
 * @export
 */
export const AlarmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new alarm
         * @param {CreateAlarmDto} createAlarmDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alarmsControllerCreateAlarm: async (createAlarmDto: CreateAlarmDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAlarmDto' is not null or undefined
            assertParamExists('alarmsControllerCreateAlarm', 'createAlarmDto', createAlarmDto)
            const localVarPath = `/alarms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAlarmDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an alarm by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alarmsControllerDeleteAlarm: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alarmsControllerDeleteAlarm', 'id', id)
            const localVarPath = `/alarms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get alarm by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alarmsControllerGetAlarmById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alarmsControllerGetAlarmById', 'id', id)
            const localVarPath = `/alarms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get alarms with pagination, sorting by timestamp (newest first), and optional type filtering
         * @summary Get all alarms
         * @param {AlarmsControllerGetAlarmsTypeEnum} [type] Filter alarms by type
         * @param {string} [sensorId] Filter alarms by sensor ID
         * @param {number} [page] Page number (1-based)
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alarmsControllerGetAlarms: async (type?: AlarmsControllerGetAlarmsTypeEnum, sensorId?: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/alarms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (sensorId !== undefined) {
                localVarQueryParameter['sensorId'] = sensorId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlarmsApi - functional programming interface
 * @export
 */
export const AlarmsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlarmsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new alarm
         * @param {CreateAlarmDto} createAlarmDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alarmsControllerCreateAlarm(createAlarmDto: CreateAlarmDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlarmResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alarmsControllerCreateAlarm(createAlarmDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlarmsApi.alarmsControllerCreateAlarm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an alarm by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alarmsControllerDeleteAlarm(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alarmsControllerDeleteAlarm(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlarmsApi.alarmsControllerDeleteAlarm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get alarm by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alarmsControllerGetAlarmById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlarmResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alarmsControllerGetAlarmById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlarmsApi.alarmsControllerGetAlarmById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get alarms with pagination, sorting by timestamp (newest first), and optional type filtering
         * @summary Get all alarms
         * @param {AlarmsControllerGetAlarmsTypeEnum} [type] Filter alarms by type
         * @param {string} [sensorId] Filter alarms by sensor ID
         * @param {number} [page] Page number (1-based)
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alarmsControllerGetAlarms(type?: AlarmsControllerGetAlarmsTypeEnum, sensorId?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlarmsControllerGetAlarms200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alarmsControllerGetAlarms(type, sensorId, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlarmsApi.alarmsControllerGetAlarms']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AlarmsApi - factory interface
 * @export
 */
export const AlarmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlarmsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new alarm
         * @param {CreateAlarmDto} createAlarmDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alarmsControllerCreateAlarm(createAlarmDto: CreateAlarmDto, options?: RawAxiosRequestConfig): AxiosPromise<AlarmResponseDto> {
            return localVarFp.alarmsControllerCreateAlarm(createAlarmDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an alarm by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alarmsControllerDeleteAlarm(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.alarmsControllerDeleteAlarm(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get alarm by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alarmsControllerGetAlarmById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AlarmResponseDto> {
            return localVarFp.alarmsControllerGetAlarmById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get alarms with pagination, sorting by timestamp (newest first), and optional type filtering
         * @summary Get all alarms
         * @param {AlarmsControllerGetAlarmsTypeEnum} [type] Filter alarms by type
         * @param {string} [sensorId] Filter alarms by sensor ID
         * @param {number} [page] Page number (1-based)
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alarmsControllerGetAlarms(type?: AlarmsControllerGetAlarmsTypeEnum, sensorId?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<AlarmsControllerGetAlarms200Response> {
            return localVarFp.alarmsControllerGetAlarms(type, sensorId, page, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlarmsApi - object-oriented interface
 * @export
 * @class AlarmsApi
 * @extends {BaseAPI}
 */
export class AlarmsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new alarm
     * @param {CreateAlarmDto} createAlarmDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlarmsApi
     */
    public alarmsControllerCreateAlarm(createAlarmDto: CreateAlarmDto, options?: RawAxiosRequestConfig) {
        return AlarmsApiFp(this.configuration).alarmsControllerCreateAlarm(createAlarmDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an alarm by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlarmsApi
     */
    public alarmsControllerDeleteAlarm(id: string, options?: RawAxiosRequestConfig) {
        return AlarmsApiFp(this.configuration).alarmsControllerDeleteAlarm(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get alarm by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlarmsApi
     */
    public alarmsControllerGetAlarmById(id: string, options?: RawAxiosRequestConfig) {
        return AlarmsApiFp(this.configuration).alarmsControllerGetAlarmById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get alarms with pagination, sorting by timestamp (newest first), and optional type filtering
     * @summary Get all alarms
     * @param {AlarmsControllerGetAlarmsTypeEnum} [type] Filter alarms by type
     * @param {string} [sensorId] Filter alarms by sensor ID
     * @param {number} [page] Page number (1-based)
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlarmsApi
     */
    public alarmsControllerGetAlarms(type?: AlarmsControllerGetAlarmsTypeEnum, sensorId?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return AlarmsApiFp(this.configuration).alarmsControllerGetAlarms(type, sensorId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AlarmsControllerGetAlarmsTypeEnum = {
    Motion: 'motion',
    Smoke: 'smoke',
    Temperature: 'temperature',
    Sound: 'sound',
    Intrusion: 'intrusion'
} as const;
export type AlarmsControllerGetAlarmsTypeEnum = typeof AlarmsControllerGetAlarmsTypeEnum[keyof typeof AlarmsControllerGetAlarmsTypeEnum];


/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.appControllerGetHello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appControllerGetHello(options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get current user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login with username and password
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginDto: LoginDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('authControllerLogin', 'loginDto', loginDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a new user
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister: async (registerDto: RegisterDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerDto' is not null or undefined
            assertParamExists('authControllerRegister', 'registerDto', registerDto)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get current user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGetProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGetProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerGetProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login with username and password
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register a new user
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRegister(registerDto: RegisterDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRegister(registerDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Get current user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile(options?: RawAxiosRequestConfig): AxiosPromise<UserResponseDto> {
            return localVarFp.authControllerGetProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login with username and password
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponseDto> {
            return localVarFp.authControllerLogin(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a new user
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(registerDto: RegisterDto, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponseDto> {
            return localVarFp.authControllerRegister(registerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Get current user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerGetProfile(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerGetProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login with username and password
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a new user
     * @param {RegisterDto} registerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerRegister(registerDto: RegisterDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerRegister(registerDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SensorsApi - axios parameter creator
 * @export
 */
export const SensorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new sensor
         * @param {CreateSensorDto} createSensorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorsControllerCreate: async (createSensorDto: CreateSensorDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSensorDto' is not null or undefined
            assertParamExists('sensorsControllerCreate', 'createSensorDto', createSensorDto)
            const localVarPath = `/sensors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSensorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all sensors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sensors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a sensor by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorsControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sensorsControllerFindOne', 'id', id)
            const localVarPath = `/sensors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a sensor
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorsControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sensorsControllerRemove', 'id', id)
            const localVarPath = `/sensors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a sensor
         * @param {string} id 
         * @param {UpdateSensorDto} updateSensorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorsControllerUpdate: async (id: string, updateSensorDto: UpdateSensorDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sensorsControllerUpdate', 'id', id)
            // verify required parameter 'updateSensorDto' is not null or undefined
            assertParamExists('sensorsControllerUpdate', 'updateSensorDto', updateSensorDto)
            const localVarPath = `/sensors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSensorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SensorsApi - functional programming interface
 * @export
 */
export const SensorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SensorsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new sensor
         * @param {CreateSensorDto} createSensorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorsControllerCreate(createSensorDto: CreateSensorDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SensorResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorsControllerCreate(createSensorDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SensorsApi.sensorsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all sensors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SensorResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SensorsApi.sensorsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a sensor by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SensorResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SensorsApi.sensorsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a sensor
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SensorsApi.sensorsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a sensor
         * @param {string} id 
         * @param {UpdateSensorDto} updateSensorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorsControllerUpdate(id: string, updateSensorDto: UpdateSensorDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SensorResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorsControllerUpdate(id, updateSensorDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SensorsApi.sensorsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SensorsApi - factory interface
 * @export
 */
export const SensorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SensorsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new sensor
         * @param {CreateSensorDto} createSensorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorsControllerCreate(createSensorDto: CreateSensorDto, options?: RawAxiosRequestConfig): AxiosPromise<SensorResponseDto> {
            return localVarFp.sensorsControllerCreate(createSensorDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all sensors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<SensorResponseDto>> {
            return localVarFp.sensorsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a sensor by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<SensorResponseDto> {
            return localVarFp.sensorsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a sensor
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorsControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sensorsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a sensor
         * @param {string} id 
         * @param {UpdateSensorDto} updateSensorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorsControllerUpdate(id: string, updateSensorDto: UpdateSensorDto, options?: RawAxiosRequestConfig): AxiosPromise<SensorResponseDto> {
            return localVarFp.sensorsControllerUpdate(id, updateSensorDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SensorsApi - object-oriented interface
 * @export
 * @class SensorsApi
 * @extends {BaseAPI}
 */
export class SensorsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new sensor
     * @param {CreateSensorDto} createSensorDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApi
     */
    public sensorsControllerCreate(createSensorDto: CreateSensorDto, options?: RawAxiosRequestConfig) {
        return SensorsApiFp(this.configuration).sensorsControllerCreate(createSensorDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all sensors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApi
     */
    public sensorsControllerFindAll(options?: RawAxiosRequestConfig) {
        return SensorsApiFp(this.configuration).sensorsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a sensor by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApi
     */
    public sensorsControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return SensorsApiFp(this.configuration).sensorsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a sensor
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApi
     */
    public sensorsControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return SensorsApiFp(this.configuration).sensorsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a sensor
     * @param {string} id 
     * @param {UpdateSensorDto} updateSensorDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApi
     */
    public sensorsControllerUpdate(id: string, updateSensorDto: UpdateSensorDto, options?: RawAxiosRequestConfig) {
        return SensorsApiFp(this.configuration).sensorsControllerUpdate(id, updateSensorDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VisualizationsApi - axios parameter creator
 * @export
 */
export const VisualizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a visualization by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationsControllerDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visualizationsControllerDelete', 'id', id)
            const localVarPath = `/visualizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all visualizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/visualizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a visualization by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationsControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visualizationsControllerFindOne', 'id', id)
            const localVarPath = `/visualizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload an image file and associate it with the alarm specified by alarmId in the URL
         * @summary Upload a visualization image for an alarm
         * @param {string} alarmId 
         * @param {File} image The image file to upload (jpg, jpeg, or png)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationsControllerUploadFile: async (alarmId: string, image: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alarmId' is not null or undefined
            assertParamExists('visualizationsControllerUploadFile', 'alarmId', alarmId)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('visualizationsControllerUploadFile', 'image', image)
            const localVarPath = `/visualizations/{alarmId}`
                .replace(`{${"alarmId"}}`, encodeURIComponent(String(alarmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VisualizationsApi - functional programming interface
 * @export
 */
export const VisualizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VisualizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a visualization by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizationsControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizationsControllerDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisualizationsApi.visualizationsControllerDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all visualizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizationsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VisualizationResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizationsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisualizationsApi.visualizationsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a visualization by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizationsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisualizationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizationsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisualizationsApi.visualizationsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload an image file and associate it with the alarm specified by alarmId in the URL
         * @summary Upload a visualization image for an alarm
         * @param {string} alarmId 
         * @param {File} image The image file to upload (jpg, jpeg, or png)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizationsControllerUploadFile(alarmId: string, image: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisualizationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizationsControllerUploadFile(alarmId, image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisualizationsApi.visualizationsControllerUploadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VisualizationsApi - factory interface
 * @export
 */
export const VisualizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VisualizationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a visualization by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationsControllerDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.visualizationsControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all visualizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<VisualizationResponseDto>> {
            return localVarFp.visualizationsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a visualization by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<VisualizationResponseDto> {
            return localVarFp.visualizationsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload an image file and associate it with the alarm specified by alarmId in the URL
         * @summary Upload a visualization image for an alarm
         * @param {string} alarmId 
         * @param {File} image The image file to upload (jpg, jpeg, or png)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationsControllerUploadFile(alarmId: string, image: File, options?: RawAxiosRequestConfig): AxiosPromise<VisualizationResponseDto> {
            return localVarFp.visualizationsControllerUploadFile(alarmId, image, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VisualizationsApi - object-oriented interface
 * @export
 * @class VisualizationsApi
 * @extends {BaseAPI}
 */
export class VisualizationsApi extends BaseAPI {
    /**
     * 
     * @summary Delete a visualization by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationsApi
     */
    public visualizationsControllerDelete(id: string, options?: RawAxiosRequestConfig) {
        return VisualizationsApiFp(this.configuration).visualizationsControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all visualizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationsApi
     */
    public visualizationsControllerFindAll(options?: RawAxiosRequestConfig) {
        return VisualizationsApiFp(this.configuration).visualizationsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a visualization by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationsApi
     */
    public visualizationsControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return VisualizationsApiFp(this.configuration).visualizationsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload an image file and associate it with the alarm specified by alarmId in the URL
     * @summary Upload a visualization image for an alarm
     * @param {string} alarmId 
     * @param {File} image The image file to upload (jpg, jpeg, or png)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationsApi
     */
    public visualizationsControllerUploadFile(alarmId: string, image: File, options?: RawAxiosRequestConfig) {
        return VisualizationsApiFp(this.configuration).visualizationsControllerUploadFile(alarmId, image, options).then((request) => request(this.axios, this.basePath));
    }
}



